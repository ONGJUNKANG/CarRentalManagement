@page  "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car colours</h3>
<br />
@if (Colours == null)
{
    <div class="alert alert-info">Loading colours...</div> 
}
else
{
    <table class=" table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var colour in Colours)
            {
                <tr>
                    <td>@colour.Name</td>
                    <td>
                        <a herf="/colours/view/@colour.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a herf="/colours/edit/@colour.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(colour.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private List<Colour> Colours;
    protected async override Task OnInitializedAsync()
    {
        Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");

    }

    async Task Delete(int coloursId)
    {
        var colours = Colours.First(q => q.Id == coloursId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want ot delete {colours.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{coloursId}");
            await OnInitializedAsync();
        }
    }
}
